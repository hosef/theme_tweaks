<?php
/**
 * @file
 * Allows users to change the color scheme of themes.
 */

/**
 * Implements hook_menu().
 */
function theme_tweaks_menu() {
  $items['admin/appearance/color/%'] = array(
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('theme_tweaks_colors', 3),
    'access arguments' => array('access content'),
    'file' => 'theme_tweaks.color.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/appearance/color/%/colors'] = array(
    'title' => 'Configure colors',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/appearance/color/%/fields'] = array(
    'title' => t('Manage color fields'),
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('theme_tweaks_color_fields', 3),
    'access arguments' => array('access content'),
    'file' => 'theme_tweaks.color.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function theme_tweaks_theme() {
  return array(
    'theme_tweaks_scheme_form' => array(
      'render element' => 'form',
      'file' => 'theme_tweaks.theme.inc',
    ),
  );
}

function theme_tweaks_system_themes_page_alter($theme_groups) {
  foreach ($theme_groups['enabled'] as $key => $theme) {
    array_unshift($theme_groups['enabled'][$key]->operations, array(
      'title' => t('Change colors'),
      'href' => 'admin/appearance/color/' . $theme->name,
      'attributes' => array(
        'title' => t('Change colors'),
      ),
    ));
  }
}

/**
 * Implements hook_css_alter().
 *
 * Replaces style sheets with color-altered style sheets.
 */
function theme_tweaks_css_alter(&$css) {
  global $theme_key;
  $themes = list_themes();

  // Override stylesheets.
  $color_paths = theme_get_setting('color.stylesheets');

  if (!empty($color_paths)) {
    foreach ($themes[$theme_key]->stylesheets['all'] as $base_filename => $old_path) {
      // Loop over the path array with recolored CSS files to find matching
      // paths which could replace the non-recolored paths.
      foreach ($color_paths as $color_path) {
        // Color module currently requires unique file names to be used,
        // which allows us to compare different file paths.
        if (backdrop_basename($old_path) == backdrop_basename($color_path)) {
          // Replace the path to the new css file.
          // This keeps the order of the stylesheets intact.
          $css[$old_path]['data'] = $color_path;
        }
      }
    }
  }
}

/**
 * Replaces the logo with a color-altered logo.
 *
 * A theme that supports the color module should call this function from its
 * THEME_process_page() function, so that the correct logo is included when
 * page.tpl.php is rendered.
 *
 * @see theme()
 */
function _theme_tweaks_header_alter(&$variables) {
  global $theme_key;

  // Override logo.
  $logo = theme_get_setting('color.logo');
  if ($logo && $variables['logo'] && preg_match('!' . $theme_key . '/logo.png$!', $variables['logo'])) {
    $variables['logo'] = file_create_url($logo);
  }
}

/**
 * Retrieves the Color module information for a particular theme.
 */
function theme_tweaks_get_info($theme) {
  static $theme_info = array();

  if (isset($theme_info[$theme])) {
    return $theme_info[$theme];
  }

  $path = backdrop_get_path('theme', $theme);
  $file = BACKDROP_ROOT . '/' . $path . '/color/color.inc';
  if ($path && file_exists($file)) {
    include $file;
    $theme_info[$theme] = $info;
    return $info;
  }
}

/**
 * Retrieves the color palette for a particular theme.
 */
function theme_tweaks_get_palette($theme, $default = FALSE) {
  // Fetch and expand default palette.
  $info = theme_tweaks_get_info($theme);
  $palette = $info['schemes']['default']['colors'];

  // Load config.
  if (!$default && ($theme_palette = theme_get_setting('color.palette', $theme))) {
    foreach ($theme_palette as $color_name => $color_code) {
      $palette[$color_name] = $color_code;
    }
  }
  return $palette;
}

/**
 * Determines the value for a palette color field.
 *
 * @param $element
 *   The form element whose value is being populated.
 * @param $input
 *   The incoming input to populate the form element. If this is FALSE,
 *   the element's default value should be returned.
 * @param $form_state
 *   A keyed array containing the current state of the form.
 *
 * @return
 *   The data that will appear in the $form_state['values'] collection for this
 *   element. Return nothing to use the default.
 */
function theme_tweaks_palette_color_value($element, $input = FALSE, $form_state = array()) {
  // If we suspect a possible cross-site request forgery attack, only accept
  // hexadecimal CSS color strings from user input, to avoid problems when this
  // value is used in the JavaScript preview.
  if ($input !== FALSE) {
    // Start with the provided value for this textfield, and validate that if
    // necessary, falling back on the default value.
    $value = form_type_textfield_value($element, $input, $form_state);
    if (!$value || !isset($form_state['complete form']['#token']) || theme_tweaks_valid_hexadecimal_string($value) || backdrop_valid_token($form_state['values']['form_token'], $form_state['complete form']['#token'])) {
      return $value;
    }
    else {
      return $element['#default_value'];
    }
  }
}

/**
 * Determines if a hexadecimal CSS color string is valid.
 *
 * @param $color
 *   The string to check.
 *
 * @return
 *   TRUE if the string is a valid hexadecimal CSS color string, or FALSE if it
 *   isn't.
 */
function theme_tweaks_valid_hexadecimal_string($color) {
  return preg_match('/^#([a-f0-9]{3}){1,2}$/iD', $color);
}

/**
 * Rewrites the stylesheet to match the colors in the palette.
 */
function _theme_tweaks_rewrite_stylesheet($theme, &$info, &$paths, $palette, $style) {
  $themes = list_themes();
  // Prepare color conversion table.
  $conversion = $palette;
  foreach ($conversion as $k => $v) {
    $conversion[$k] = backdrop_strtolower($v);
  }
  $default = theme_tweaks_get_palette($theme, TRUE);

  // Split off the "Don't touch" section of the stylesheet.
  $split = "Color Module: Don't touch";
  if (strpos($style, $split) !== FALSE) {
    list($style, $fixed) = explode($split, $style);
  }

  // Find all colors in the stylesheet and the chunks in between.
  $style = preg_split('/(#[0-9a-f]{6}|#[0-9a-f]{3})/i', $style, -1, PREG_SPLIT_DELIM_CAPTURE);
  $is_color = FALSE;
  $output = '';
  $base = 'base';

  // Iterate over all the parts.
  foreach ($style as $chunk) {
    if ($is_color) {
      $chunk = backdrop_strtolower($chunk);
      // Check if this is one of the colors in the default palette.
      if ($key = array_search($chunk, $default)) {
        $chunk = $conversion[$key];
      }
      // Not a pre-set color. Extrapolate from the base.
      else {
        $chunk = _theme_tweaks_shift($palette[$base], $default[$base], $chunk, $info['blend_target']);
      }
    }
    else {
      // Determine the most suitable base color for the next color.

      // 'a' declarations. Use link.
      if (preg_match('@[^a-z0-9_-](a)[^a-z0-9_-][^/{]*{[^{]+$@i', $chunk)) {
        $base = 'link';
      }
      // 'color:' styles. Use text.
      elseif (preg_match('/(?<!-)color[^{:]*:[^{#]*$/i', $chunk)) {
        $base = 'text';
      }
      // Reset back to base.
      else {
        $base = 'base';
      }
    }
    $output .= $chunk;
    $is_color = !$is_color;
  }
  // Append fixed colors segment.
  if (isset($fixed)) {
    $output .= $fixed;
  }

  // Replace paths to images.
  foreach ($paths['map'] as $before => $after) {
    $before = base_path() . $paths['source'] . $before;
    $before = preg_replace('`(^|/)(?!../)([^/]+)/../`', '$1', $before);
    $output = str_replace($before, $after, $output);
  }

  return $output;
}

/**
 * Saves the rewritten stylesheet to disk.
 */
function _theme_tweaks_save_stylesheet($file, $style, &$paths) {
  $filepath = file_unmanaged_save_data($style, $file, FILE_EXISTS_REPLACE);
  $paths['files'][] = $filepath;

  // Set standard file permissions for webserver-generated files.
  backdrop_chmod($file);
}

/**
 * Shifts a given color, using a reference pair and a target blend color.
 *
 * Note: this function is significantly different from the JS version, as it
 * is written to match the blended images perfectly.
 *
 * Constraint: if (ref2 == target + (ref1 - target) * delta) for some fraction
 * delta then (return == target + (given - target) * delta).
 *
 * Loose constraint: Preserve relative positions in saturation and luminance
 * space.
 */
function _theme_tweaks_shift($given, $ref1, $ref2, $target) {
  // We assume that ref2 is a blend of ref1 and target and find
  // delta based on the length of the difference vectors.

  // delta = 1 - |ref2 - ref1| / |white - ref1|
  $target = _theme_tweaks_unpack($target, TRUE);
  $ref1 = _theme_tweaks_unpack($ref1, TRUE);
  $ref2 = _theme_tweaks_unpack($ref2, TRUE);
  $numerator = 0;
  $denominator = 0;
  for ($i = 0; $i < 3; ++$i) {
    $numerator += ($ref2[$i] - $ref1[$i]) * ($ref2[$i] - $ref1[$i]);
    $denominator += ($target[$i] - $ref1[$i]) * ($target[$i] - $ref1[$i]);
  }
  $delta = ($denominator > 0) ? (1 - sqrt($numerator / $denominator)) : 0;

  // Calculate the color that ref2 would be if the assumption was true.
  for ($i = 0; $i < 3; ++$i) {
    $ref3[$i] = $target[$i] + ($ref1[$i] - $target[$i]) * $delta;
  }

  // If the assumption is not true, there is a difference between ref2 and ref3.
  // We measure this in HSL space. Notation: x' = hsl(x).
  $ref2 = _theme_tweaks_rgb2hsl($ref2);
  $ref3 = _theme_tweaks_rgb2hsl($ref3);
  for ($i = 0; $i < 3; ++$i) {
    $shift[$i] = $ref2[$i] - $ref3[$i];
  }

  // Take the given color, and blend it towards the target.
  $given = _theme_tweaks_unpack($given, TRUE);
  for ($i = 0; $i < 3; ++$i) {
    $result[$i] = $target[$i] + ($given[$i] - $target[$i]) * $delta;
  }

  // Finally, we apply the extra shift in HSL space.
  // Note: if ref2 is a pure blend of ref1 and target, then |shift| = 0.
  $result = _theme_tweaks_rgb2hsl($result);
  for ($i = 0; $i < 3; ++$i) {
    $result[$i] = min(1, max(0, $result[$i] + $shift[$i]));
  }
  $result = _theme_tweaks_hsl2rgb($result);

  // Return hex color.
  return _theme_tweaks_pack($result, TRUE);
}

/**
 * Converts a hex color into an RGB triplet.
 */
function _theme_tweaks_unpack($hex, $normalize = FALSE) {
  if (strlen($hex) == 4) {
    $hex = $hex[1] . $hex[1] . $hex[2] . $hex[2] . $hex[3] . $hex[3];
  }
  $c = hexdec($hex);
  for ($i = 16; $i >= 0; $i -= 8) {
    $out[] = (($c >> $i) & 0xFF) / ($normalize ? 255 : 1);
  }

  return $out;
}

/**
 * Converts an RGB triplet to a hex color.
 */
function _theme_tweaks_pack($rgb, $normalize = FALSE) {
  $out = 0;
  foreach ($rgb as $k => $v) {
    $out |= (($v * ($normalize ? 255 : 1)) << (16 - $k * 8));
  }

  return '#' . str_pad(dechex($out), 6, 0, STR_PAD_LEFT);
}

/**
 * Converts an HSL triplet into RGB.
 */
function _theme_tweaks_hsl2rgb($hsl) {
  $h = $hsl[0];
  $s = $hsl[1];
  $l = $hsl[2];
  $m2 = ($l <= 0.5) ? $l * ($s + 1) : $l + $s - $l*$s;
  $m1 = $l * 2 - $m2;

  return array(
    _theme_tweaks_hue2rgb($m1, $m2, $h + 0.33333),
    _theme_tweaks_hue2rgb($m1, $m2, $h),
    _theme_tweaks_hue2rgb($m1, $m2, $h - 0.33333),
  );
}

/**
 * Helper function for _theme_tweaks_hsl2rgb().
 */
function _theme_tweaks_hue2rgb($m1, $m2, $h) {
  $h = ($h < 0) ? $h + 1 : (($h > 1) ? $h - 1 : $h);
  if ($h * 6 < 1) return $m1 + ($m2 - $m1) * $h * 6;
  if ($h * 2 < 1) return $m2;
  if ($h * 3 < 2) return $m1 + ($m2 - $m1) * (0.66666 - $h) * 6;

  return $m1;
}

/**
 * Converts an RGB triplet to HSL.
 */
function _theme_tweaks_rgb2hsl($rgb) {
  $r = $rgb[0];
  $g = $rgb[1];
  $b = $rgb[2];
  $min = min($r, min($g, $b));
  $max = max($r, max($g, $b));
  $delta = $max - $min;
  $l = ($min + $max) / 2;
  $s = 0;

  if ($l > 0 && $l < 1) {
    $s = $delta / ($l < 0.5 ? (2 * $l) : (2 - 2 * $l));
  }

  $h = 0;
  if ($delta > 0) {
    if ($max == $r && $max != $g) $h += ($g - $b) / $delta;
    if ($max == $g && $max != $b) $h += (2 + ($b - $r) / $delta);
    if ($max == $b && $max != $r) $h += (4 + ($r - $g) / $delta);
    $h /= 6;
  }

  return array($h, $s, $l);
}
